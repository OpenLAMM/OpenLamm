{"version":3,"file":"reduceToClassNameForSlots.cjs.js","sources":["../../../../packages/core/src/runtime/reduceToClassNameForSlots.ts"],"sourcesContent":["import { DEFINITION_LOOKUP_TABLE } from '../constants';\nimport { hashSequence } from './utils/hashSequence';\nimport type { CSSClassesMapBySlot, CSSClassesMap, CSSClasses } from '../types';\n\n/**\n * Reduces a classname map for slot to a classname string. Uses classnames according to text directions.\n *\n * @private\n */\nexport function reduceToClassName(classMap: CSSClassesMap, dir: 'ltr' | 'rtl'): [string, string] {\n  // - `classString` is a string of classnames separated by a space, used to output classes\n  // - `hashString` is a string of classnames separated by a space, used to generate a hash\n  //\n  // `hashString` is needed to handle `null` values in a class map as they don't produce any classes.\n  let classString = '';\n  let hashString = '';\n\n  // eslint-disable-next-line guard-for-in\n  for (const propertyHash in classMap) {\n    const classNameMapping: CSSClasses = classMap[propertyHash];\n\n    if (classNameMapping === 0) {\n      hashString += propertyHash + ' ';\n      continue;\n    }\n\n    const hasRTLClassName = Array.isArray(classNameMapping);\n    const className =\n      dir === 'rtl'\n        ? (hasRTLClassName ? classNameMapping[1] : classNameMapping) + ' '\n        : (hasRTLClassName ? classNameMapping[0] : classNameMapping) + ' ';\n\n    classString += className;\n    hashString += className;\n  }\n\n  return [classString.slice(0, -1), hashString.slice(0, -1)];\n}\n\n/**\n * Reduces classname maps for slots to classname strings. Registers them in a definition cache to be used by\n * `mergeClasses()`.\n *\n * @internal\n */\nexport function reduceToClassNameForSlots<Slots extends string | number>(\n  classesMapBySlot: CSSClassesMapBySlot<Slots>,\n  dir: 'ltr' | 'rtl',\n): Record<Slots, string> {\n  const classNamesForSlots = {} as Record<Slots, string>;\n\n  // eslint-disable-next-line guard-for-in\n  for (const slotName in classesMapBySlot) {\n    const [slotClasses, slotClassesHash] = reduceToClassName(classesMapBySlot[slotName], dir);\n\n    // Handles a case when there are no classes in a set i.e. \"makeStyles({ root: {} })\"\n    if (slotClassesHash === '') {\n      classNamesForSlots[slotName] = '';\n      continue;\n    }\n\n    const sequenceHash = hashSequence(slotClassesHash, dir);\n    const resultSlotClasses = sequenceHash + (slotClasses === '' ? '' : ' ' + slotClasses);\n\n    DEFINITION_LOOKUP_TABLE[sequenceHash] = [classesMapBySlot[slotName], dir];\n    classNamesForSlots[slotName] = resultSlotClasses;\n  }\n\n  return classNamesForSlots;\n}\n"],"names":["reduceToClassName","classMap","dir","classString","hashString","propertyHash","classNameMapping","hasRTLClassName","Array","isArray","className","slice","reduceToClassNameForSlots","classesMapBySlot","classNamesForSlots","slotName","slotClasses","slotClassesHash","sequenceHash","hashSequence","resultSlotClasses","DEFINITION_LOOKUP_TABLE"],"mappings":";;;;;AAIA;;;;AAIG;AACa,SAAAA,iBAAiBA,CAACC,QAAuB,EAAEC,GAAkB,EAAA;AAC3E;AACA;AACA;AACA;EACA,IAAIC,WAAW,GAAG,EAAE,CAAA;EACpB,IAAIC,UAAU,GAAG,EAAE,CAAA;AAEnB;AACA,EAAA,KAAK,MAAMC,YAAY,IAAIJ,QAAQ,EAAE;AACnC,IAAA,MAAMK,gBAAgB,GAAeL,QAAQ,CAACI,YAAY,CAAC,CAAA;IAE3D,IAAIC,gBAAgB,KAAK,CAAC,EAAE;MAC1BF,UAAU,IAAIC,YAAY,GAAG,GAAG,CAAA;AAChC,MAAA,SAAA;AACF,KAAA;AAEA,IAAA,MAAME,eAAe,GAAGC,KAAK,CAACC,OAAO,CAACH,gBAAgB,CAAC,CAAA;AACvD,IAAA,MAAMI,SAAS,GACbR,GAAG,KAAK,KAAK,GACT,CAACK,eAAe,GAAGD,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,IAAI,GAAG,GAChE,CAACC,eAAe,GAAGD,gBAAgB,CAAC,CAAC,CAAC,GAAGA,gBAAgB,IAAI,GAAG,CAAA;AAEtEH,IAAAA,WAAW,IAAIO,SAAS,CAAA;AACxBN,IAAAA,UAAU,IAAIM,SAAS,CAAA;AACzB,GAAA;EAEA,OAAO,CAACP,WAAW,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAEP,UAAU,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;AAC5D,CAAA;AAEA;;;;;AAKG;AACa,SAAAC,yBAAyBA,CACvCC,gBAA4C,EAC5CX,GAAkB,EAAA;EAElB,MAAMY,kBAAkB,GAAG,EAA2B,CAAA;AAEtD;AACA,EAAA,KAAK,MAAMC,QAAQ,IAAIF,gBAAgB,EAAE;AACvC,IAAA,MAAM,CAACG,WAAW,EAAEC,eAAe,CAAC,GAAGjB,iBAAiB,CAACa,gBAAgB,CAACE,QAAQ,CAAC,EAAEb,GAAG,CAAC,CAAA;AAEzF;IACA,IAAIe,eAAe,KAAK,EAAE,EAAE;AAC1BH,MAAAA,kBAAkB,CAACC,QAAQ,CAAC,GAAG,EAAE,CAAA;AACjC,MAAA,SAAA;AACF,KAAA;AAEA,IAAA,MAAMG,YAAY,GAAGC,yBAAY,CAACF,eAAe,EAAEf,GAAG,CAAC,CAAA;AACvD,IAAA,MAAMkB,iBAAiB,GAAGF,YAAY,IAAIF,WAAW,KAAK,EAAE,GAAG,EAAE,GAAG,GAAG,GAAGA,WAAW,CAAC,CAAA;IAEtFK,iCAAuB,CAACH,YAAY,CAAC,GAAG,CAACL,gBAAgB,CAACE,QAAQ,CAAC,EAAEb,GAAG,CAAC,CAAA;AACzEY,IAAAA,kBAAkB,CAACC,QAAQ,CAAC,GAAGK,iBAAiB,CAAA;AAClD,GAAA;AAEA,EAAA,OAAON,kBAAkB,CAAA;AAC3B;;;;;"}