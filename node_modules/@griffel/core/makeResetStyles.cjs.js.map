{"version":3,"file":"makeResetStyles.cjs.js","sources":["../../../packages/core/src/makeResetStyles.ts"],"sourcesContent":["import type { GriffelResetStyle } from '@griffel/style-types';\n\nimport { DEBUG_RESET_CLASSES } from './constants';\nimport { insertionFactory } from './insertionFactory';\nimport { resolveResetStyleRules } from './runtime/resolveResetStyleRules';\nimport type { CSSRulesByBucket, GriffelRenderer, GriffelInsertionFactory } from './types';\n\nexport interface MakeResetStylesOptions {\n  dir: 'ltr' | 'rtl';\n  renderer: GriffelRenderer;\n}\n\nexport function makeResetStyles(styles: GriffelResetStyle, factory: GriffelInsertionFactory = insertionFactory) {\n  const insertStyles = factory();\n\n  let ltrClassName: string | null = null;\n  let rtlClassName: string | null = null;\n\n  let cssRules: CSSRulesByBucket | string[] | null = null;\n  let classNameHashSalt: string;\n\n  function computeClassName(options: MakeResetStylesOptions): string {\n    const { dir, renderer } = options;\n\n    if (ltrClassName === null) {\n      [ltrClassName, rtlClassName, cssRules] = resolveResetStyleRules(styles, renderer.classNameHashSalt);\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (renderer.classNameHashSalt) {\n          if (classNameHashSalt !== renderer.classNameHashSalt) {\n            console.error(\n              [\n                '@griffel/core:',\n                '\\n\\n',\n                'A provided renderer has different \"classNameHashSalt\".',\n                'This is not supported and WILL cause issues with classnames generation.',\n                'Ensure that all renderers created with \"createDOMRenderer()\" have the same \"classNameHashSalt\".',\n              ].join(' '),\n            );\n          }\n\n          classNameHashSalt = renderer.classNameHashSalt;\n        }\n      }\n    }\n\n    insertStyles(renderer, Array.isArray(cssRules) ? { r: cssRules! } : cssRules!);\n\n    const className = dir === 'ltr' ? ltrClassName : rtlClassName || ltrClassName;\n\n    if (process.env.NODE_ENV !== 'production') {\n      DEBUG_RESET_CLASSES[className] = 1;\n    }\n\n    return className;\n  }\n\n  return computeClassName;\n}\n"],"names":["makeResetStyles","styles","factory","insertionFactory","insertStyles","ltrClassName","rtlClassName","cssRules","classNameHashSalt","computeClassName","options","dir","renderer","resolveResetStyleRules","process","env","NODE_ENV","console","error","join","Array","isArray","r","className","DEBUG_RESET_CLASSES"],"mappings":";;;;;;SAYgBA,eAAeA,CAACC,MAAyB,EAAEC,UAAmCC,iCAAgB,EAAA;AAC5G,EAAA,MAAMC,YAAY,GAAGF,OAAO,EAAE,CAAA;EAE9B,IAAIG,YAAY,GAAkB,IAAI,CAAA;EACtC,IAAIC,YAAY,GAAkB,IAAI,CAAA;EAEtC,IAAIC,QAAQ,GAAuC,IAAI,CAAA;AACvD,EAAA,IAAIC,iBAAyB,CAAA;EAE7B,SAASC,gBAAgBA,CAACC,OAA+B,EAAA;IACvD,MAAM;MAAEC,GAAG;AAAEC,MAAAA,QAAAA;AAAU,KAAA,GAAGF,OAAO,CAAA;IAEjC,IAAIL,YAAY,KAAK,IAAI,EAAE;AACzB,MAAA,CAACA,YAAY,EAAEC,YAAY,EAAEC,QAAQ,CAAC,GAAGM,6CAAsB,CAACZ,MAAM,EAAEW,QAAQ,CAACJ,iBAAiB,CAAC,CAAA;AAEnG,MAAA,IAAIM,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QACzC,IAAIJ,QAAQ,CAACJ,iBAAiB,EAAE;AAC9B,UAAA,IAAIA,iBAAiB,KAAKI,QAAQ,CAACJ,iBAAiB,EAAE;AACpDS,YAAAA,OAAO,CAACC,KAAK,CACX,CACE,gBAAgB,EAChB,MAAM,EACN,wDAAwD,EACxD,yEAAyE,EACzE,iGAAiG,CAClG,CAACC,IAAI,CAAC,GAAG,CAAC,CACZ,CAAA;AACH,WAAA;UAEAX,iBAAiB,GAAGI,QAAQ,CAACJ,iBAAiB,CAAA;AAChD,SAAA;AACF,OAAA;AACF,KAAA;IAEAJ,YAAY,CAACQ,QAAQ,EAAEQ,KAAK,CAACC,OAAO,CAACd,QAAQ,CAAC,GAAG;AAAEe,MAAAA,CAAC,EAAEf,QAAAA;KAAW,GAAGA,QAAS,CAAC,CAAA;IAE9E,MAAMgB,SAAS,GAAGZ,GAAG,KAAK,KAAK,GAAGN,YAAY,GAAGC,YAAY,IAAID,YAAY,CAAA;AAE7E,IAAA,IAAIS,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;AACzCQ,MAAAA,6BAAmB,CAACD,SAAS,CAAC,GAAG,CAAC,CAAA;AACpC,KAAA;AAEA,IAAA,OAAOA,SAAS,CAAA;AAClB,GAAA;AAEA,EAAA,OAAOd,gBAAgB,CAAA;AACzB;;;;"}